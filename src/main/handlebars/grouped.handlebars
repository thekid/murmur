{{#> layout}}
  {{#*inline "title"}}Feed{{/inline}}
  {{#*inline "content"}}
    <h1>Grouped Feed</h1>

    <!-- Groups -->
    <div class="ui vertical segment">
      <div class="ui labels">
        {{#each groups}}
          <a class="ui image label" style="margin: .3em" data-id="{{id}}" onclick="toggle(this)">
            <img src="{{mugshot_url}}">
            {{full_name}}
            <div class="detail">{{stats.members}}</div>
          </a>
        {{/each}}
      </div>
    </div>

    <!-- Feed generated by these groups -->
    <div class="ui vertical segment">
      <template id="event">
        <div class="event">
          <div class="label">
            <img src="#{sender.mugshot_url}">
          </div>
          <div class="content">
            <div class="summary">
              <a href="#{sender.web_url}">#{sender.full_name}</a> posted in <a href="#{group.web_url}">#{group.full_name}</a>
              <a title="#{message.id}" class="date" href="#{message.web_url}">#{message.created_at}</a>
            </div>
            <div class="extra text" style="max-width: 640px !important">
              #{first(message.content_excerpt)}
            </div>
          </div>
        </div>
      </template>

      <div class="ui large feed" id="feed">
        Select one or more groups
      </div>

      <div class="ui dimmer" id="loading">
        <div class="ui loader"></div>
      </div>
    </div>
  {{/inline}}
  {{#*inline "script"}}
    <script type="text/javascript">
      const results = {};
      const selected = {};
      let debounce = null;

      function first(content) {
        let s = content.match(/[^,]\n\n/) || content.match(/([.?!]( |\n|$))/);
        return s ? content.substring(0, s.index + 1) : content;
      }

      function toggle($el) {
        clearTimeout(debounce);
        let id = $el.dataset.id;
        if (typeof(selected[id]) === 'undefined') {
          $el.classList.add('violet');
          selected[id] = true;
        } else {
          $el.classList.remove('violet');
          delete selected[id];
        }
        debounce = setTimeout(update, 1000);
      }

      function update() {
        const $feed = document.getElementById('feed');
        const $loading = document.getElementById('loading');
        const template = document.getElementById('event').innerHTML;
        const placeholders = new RegExp(/#\{([^}]+)\}/g);

        let todo = Object.keys(selected).length;
        if (0 === todo) {
          $feed.innerHTML = '';
          return ;
        }

        $loading.classList.add('active');
        let completed = () => {
          todo--;
          if (todo > 0) return;

          let references = [];
          let messages = [];
          for (const id in selected) {
            if (typeof(results[id]) === 'undefined') {
              console.log('Missing result', id);
              continue;
            }

            for (const reference of results[id].references) {
              if (typeof(references[reference.type]) === 'undefined') {
                references[reference.type] = {};
              }
              references[reference.type][reference.id] = reference;
            }
            messages = messages.concat(results[id].messages);
          }

          messages.sort((a, b) => b.id - a.id);

          let html = '';
          for (const message of messages) {
            let sender = references.user[message.sender_id];
            let group = references.group[message.group_id];
            html += template.replaceAll(placeholders, (match, placeholder) => eval(placeholder));
          }

          $feed.innerHTML = html;
          $loading.classList.remove('active');
        }
        for (const id in selected) {
          if (typeof(results[id]) === 'undefined') {
            fetch('/api/feed/group/' + id + '?limit=3', {method: 'GET', credentials: 'same-origin'})
              .then(res => res.json())
              .then(result => { results[id] = result; completed(); })
              .catch(error => { console.error(error); completed(); })
            ;
          } else {
            completed();
          }
        }
      }
    </script>
  {{/inline}}
{{/layout}}