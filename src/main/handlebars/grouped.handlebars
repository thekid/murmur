{{#> layout}}
  {{#*inline "title"}}Grouped Feed{{/inline}}
  {{#*inline "content"}}
    <h1>Grouped Feed</h1>

    <!-- Groups -->
    <div class="ui vertical segment">
      <div class="ui labels">
        {{#each groups}}
          <a class="ui image label" style="margin: .3em" data-id="{{id}}" onclick="toggle(this)">
            <img src="{{mugshot_url}}">
            {{full_name}}
            <div class="detail">{{stats.members}}</div>
          </a>
        {{/each}}
      </div>
    </div>

    <!-- Feed generated by these groups -->
    <div class="ui vertical segment" id="content">
      {{> templates/message}}

      <div class="ui cards" id="feed" style="min-height: 10em">
        Select one or more groups
      </div>
    </div>
  {{/inline}}
  {{#*inline "script"}}
    <script type="text/javascript">
      const results = {};
      const selected = {};
      let debounce = null;

      function toggle($el) {
        clearTimeout(debounce);
        let id = $el.dataset.id;
        if (typeof(selected[id]) === 'undefined') {
          $el.classList.add('violet');
          selected[id] = true;
        } else {
          $el.classList.remove('violet');
          delete selected[id];
        }
        debounce = setTimeout(update, 1000);
      }

      function update() {
        const $content = document.getElementById('content');
        const $feed = document.getElementById('feed');
        const template = document.getElementById('event').innerHTML;

        let todo = Object.keys(selected).length;
        if (0 === todo) {
          $feed.innerHTML = '';
          return ;
        }

        $content.classList.add('loading');
        let completed = () => {
          todo--;
          if (todo > 0) return;

          let edges = [];
          for (const id in selected) {
            if (typeof(results[id]) === 'undefined' || null === results[id]) {
              console.log('Missing result', id);
            } else {
              edges = edges.concat(results[id].group.feed.threads.edges);
            }
          }

          edges.sort((a, b) => ((a.node.updatedAt === b.node.updatedAt) ? 0 : ((a.node.updatedAt > b.node.updatedAt) ? -1 : 1)));

          let html = '';
          for (const edge of edges) {
            const message = edge.node;

            let content;
            if (null !== message.threadStarter.body.serializedContentState) {
              content = JSON.parse(message.threadStarter.body.serializedContentState);
            } else if (null !== message.threadStarter.sharedMessage) {
              content = JSON.parse(message.threadStarter.sharedMessage.body.serializedContentState);
            } else {
              content = {blocks: []};
            }

            html += template.replaceAll(format.placeholders, (match, placeholder) => format.html(eval(placeholder)));
          }

          $feed.innerHTML = html;
          $content.classList.remove('loading');
          $('.excerpt').popup();
        }
        for (const id in selected) {
          if (typeof(results[id]) === 'undefined') {
            fetch('/api/feed/group/' + id + '?limit=5', {method: 'GET', credentials: 'same-origin'})
              .then(res => res.json())
              .then(result => { results[id] = result; completed(); })
              .catch(error => { results[id] = null; console.error(error); completed(); })
            ;
          } else {
            completed();
          }
        }
      }
    </script>
  {{/inline}}
{{/layout}}