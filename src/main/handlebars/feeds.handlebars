{{#> layout}}
  {{#*inline "title"}}{{lookup navigation request.uri.path}} feed{{/inline}}
  {{#*inline "content"}}
    <h1 title="{{lookup help request.uri.path}}">{{> title}}</h1>
    <div class="ui vertical clearing segment" style="border-bottom: none">
      <div style="display: grid; grid-template-columns: auto max-content; align-items: center;">
        <div><i class="clock icon"></i> <span id="timing">...</span></div>
        <button class="ui tiny labeled icon button" type="submit" onclick="update(true)">
          <i class="refresh icon"></i> Refresh
        </button>
      </div>
    </div>
    <div class="ui vertical clearing segment" style="padding-top: 0">
      <select class="ui dropdown" id="grouping">
        <option value="none">No grouping</option>
        <option value="adjacent">Adjacent messages in group</option>
        <option value="person">All by author</option>
      </select>

      <select class="ui dropdown" id="ordering">
        <option value="date">Order by date</option>
        <option value="views">Order by views</option>
        <option value="likes">Order by likes</option>
        <option value="rank">Order by rank</option>
      </select>
    </div>

    <!-- Feed -->
    <div class="ui vertical segment" id="content">
      <div class="ui stackable cards" id="feed">
        <div class="card">
          <div class="content">
            <div class="ui placeholder">
              <div class="header"><div class="medium line"></div></div>
              <div class="meta"><div class="short line"></div></div>
            </div>
            <div class="ui placeholder">
              <div class="description"><div class="line"></div></div>
            </div>
          </div>
          <div class="extra content">
            <div class="center aligned author">
              <div class="ui placeholder">
                <div class="avatar image"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  {{/inline}}
  {{#*inline "script"}}
    <script type="text/javascript">
      const following = {{{following}}};
      const group = {
        none : function(results) {
          let list = [];
          for (const edge of results) {
            list.push({
              ...edge,
              stats   : {
                viewed  : edge.node.seenByCount,
                liked   : edge.node.threadStarter.reactionsConnection.totalCount,
                replied : edge.node.replies.totalCount
              },
            });
          }
          return list;
        },
        adjacent : function(results) {
          let previous = null;
          let adjacent = [];
          for (const edge of results) {
            const key = edge.node.threadStarter.sender.id + '@' + edge.node.group.id;
            if (key === previous) {
              with (adjacent[adjacent.length - 1]) {
                stacked.push(edge);
                stats.viewed += edge.node.seenByCount;
                stats.replied += edge.node.replies.totalCount;
                stats.liked += edge.node.threadStarter.reactionsConnection.totalCount;
              }
            } else {
              previous = key;
              adjacent.push({
                ...edge,
                stats   : {
                  viewed  : edge.node.seenByCount,
                  liked   : edge.node.threadStarter.reactionsConnection.totalCount,
                  replied : edge.node.replies.totalCount
                },
                stacked : [],
                groups  : {[edge.node.group.id]: edge.node.group}
              });
            }
          }
          return adjacent;
        },
        person : function(results) {
          let grouped = {};
          for (const edge of results) {
            let sender = edge.node.threadStarter.sender.id;
            if (undefined === grouped[sender]) {
              grouped[sender]= {
                ...edge,
                stats   : {
                  viewed  : edge.node.seenByCount,
                  liked   : edge.node.threadStarter.reactionsConnection.totalCount,
                  replied : edge.node.replies.totalCount
                },
                stacked : [],
                groups  : {[edge.node.group.id]: edge.node.group}
              };
            } else {
              with (grouped[sender]) {
                stacked.push(edge);
                groups[edge.node.group.id] = edge.node.group;
                stats.viewed += edge.node.seenByCount;
                stats.replied += edge.node.replies.totalCount;
                stats.liked += edge.node.threadStarter.reactionsConnection.totalCount;
              }
            }
          }
          return Object.values(grouped);
        },
      };
      const order = {
        date: function(results) {
          results.sort((a, b) => ((a.node.updatedAt === b.node.updatedAt) ? 0 : ((a.node.updatedAt > b.node.updatedAt) ? -1 : 1)));
        },
        views: function(results) {
          results.sort((a, b) => b.stats.viewed - a.stats.viewed);
        },
        likes: function(results) {
          results.sort((a, b) => b.stats.liked - a.stats.liked);
        },
        rank: function(results) {
          let ranking = (stats) => (stats.viewed * 11 + stats.liked * 29 + stats.replied * 60);
          results.sort((a, b) => ranking(b.stats) - ranking(a.stats));
        },
      };
      let results;

      function update(reload) {
        const $content = document.getElementById('content');
        const $feed = document.getElementById('feed');
        const $timing = document.getElementById('timing');
        const start = new Date().getTime();
        const template = Handlebars.compile(`{{{source 'templates/messages'}}}`);
        const groupby = document.getElementById('grouping').value;
        const orderby = document.getElementById('ordering').value;

        const completed = function(error) {
          if (null !== error) {
            console.error(error);
            $feed.innerHTML = template({edges: [], following: following, errors: [error.name + ': ' + error.message]});
          } else {
            let grouped = group[groupby](results);
            order[orderby](grouped);
            $feed.innerHTML = template({edges: grouped, following: following, errors: []});
          }

          $content.classList.remove('loading');
          $timing.innerHTML = ((new Date().getTime() - start) / 1000) + ' seconds';
          $('.excerpt').popup();
          $('.details').dropdown({on: 'hover'});
        }

        $content.classList.add('loading');
        if (reload) {
          fetch('/api{{request.uri.path}}?limit=15', {method: 'GET', credentials: 'same-origin'})
            .then(res => res.ok ? res.json() : (function() { throw new Error(res.status + ': ' + res.statusText); })())
            .then(result => { results = result.viewer.homeFeed.homeFeedCards.edges; completed(null); })
            .catch(error => completed(error))
          ;
        } else {
          completed(null);
        }
      };

      window.onload = function() {
        $('.ui.dropdown').dropdown({onChange: () => update(false)});
        update(true);
      };
    </script>
  {{/inline}}
{{/layout}}