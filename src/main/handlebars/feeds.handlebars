{{#> layout}}
  {{#*inline "title"}}The {{kind}} Feed{{/inline}}
  {{#*inline "content"}}
    <h1>The {{kind}} feed</h1>
    <div class="ui vertical clearing segment">
      <button class="ui right floated tiny labeled icon button" type="submit" onclick="update()"><i class="refresh icon"></i> Refresh</button>
      <p>
        <i class="clock icon"></i> <span id="timing">...</span>
      </p>
    </div>

    <!-- Feed -->
    <div class="ui vertical segment" id="content">
      {{> templates/message}}

      <div class="ui cards" id="feed">
        <div class="card">
          <div class="content">
            <div class="ui placeholder">
              <div class="header"><div class="medium line"></div></div>
              <div class="meta"><div class="short line"></div></div>
            </div>
            <div class="ui placeholder">
              <div class="description"><div class="line"></div></div>
            </div>
          </div>
          <div class="extra content">
            <div class="center aligned author">
              <div class="ui placeholder">
                <div class="avatar image"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  {{/inline}}
  {{#*inline "script"}}
    <script type="text/javascript">
      function update() {
        const $content = document.getElementById('content');
        const $feed = document.getElementById('feed');
        const $timing = document.getElementById('timing');
        const template = document.getElementById('event').innerHTML;    
        const start = new Date().getTime();  

        const completed = function(result) {
          let html = '';
          if (result !== null) {
            const edges = result.viewer.homeFeed.homeFeedCards.edges;
            edges.sort((a, b) => ((a.node.updatedAt === b.node.updatedAt) ? 0 : ((a.node.updatedAt > b.node.updatedAt) ? -1 : 1)));

            for (const edge of edges) {
              const message = edge.node;

              let content;
              if (null !== message.threadStarter.body.serializedContentState) {
                content = JSON.parse(message.threadStarter.body.serializedContentState);
              } else if (null !== message.threadStarter.sharedMessage) {
                content = JSON.parse(message.threadStarter.sharedMessage.body.serializedContentState);
              } else {
                content = {blocks: []};
              }

              html += template.replaceAll(format.placeholders, (match, placeholder) => format.html(eval(placeholder)));
            }
          }

          $feed.innerHTML = html;
          $content.classList.remove('loading');
          $timing.innerHTML = ((new Date().getTime() - start) / 1000) + ' seconds';
          $('.excerpt').popup();
        }

        $content.classList.add('loading');
        fetch('/api/feed/{{kind}}?limit=15', {method: 'GET', credentials: 'same-origin'})
          .then(res => res.json())
          .then(result => { completed(result); })
          .catch(error => { completed(null); console.error(error); completed(); })
        ;
      };

      window.onload = update;
    </script>
  {{/inline}}
{{/layout}}