<!DOCTYPE html>
{{declare 'navigation'
  /='Home'
  /feed/all='All'
  /feed/discovery='Discovery'
  /feed/following='Following'
  /grouped/all='Grouped'
  /grouped/questions='Questions'
}}
<html>
  <head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="msapplication-config" content="none"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>{{> title}} - Murmur</title>
    <link href="//cdn.jsdelivr.net/npm/fomantic-ui@2.8.7/dist/semantic.min.css" rel="stylesheet" type="text/css">
    <style type="text/css">
      .user-info {
        display: grid;
        grid-template: none / 480px auto;
      }

      .hamburger {
        display: hidden;
        border: none;
        background: none;
        padding: 0;
      }

      @media only screen and (max-width: 767.98px) {
        .user-info {
          grid-template: max-content auto / none;
          grid-gap: 2em;
        }

        .hamburger {
          width: 40px;
          height: 40px;
          padding: 12.5px;
          position: absolute;
          right: 0;
          top: 0;
          cursor: pointer;
          display: block;
        }

        .hamburger:focus {
          outline: none;
          background: rgba(0,0,0,.3);
        }

        .hamburger div {
          height: 3px;
          background: white;
          margin: 0 0 3px 0;
        }

        .ui.stackable.menu .item:not(.active) {
          display: none;
        }

        .ui.stackable.menu.open .item:not(.active) {
          display: block;
        }

        .ui.stackable.menu.open a:last-of-type {
          box-shadow: 0 5px 10px rgba(0,0,0,.3);
        }
      }
    </style>
  </head>
  <body class="pushable">
    <nav class="ui top fixed inverted stackable menu">
      {{#each navigation}}
        <a class="{{#if (equals request.uri.path @key)}}active violet{{/if}} item" href="{{@key}}">{{.}}</a>
      {{/each}}
      <button class="hamburger" onclick="$(this).parent().toggleClass('open')">
        <div></div>
        <div></div>
        <div></div>
      </button>
    </nav>

    <main class="pusher" style="padding: 50px 10px 0 10px">
      {{> content}}
    </main>

    <script src="//cdn.jsdelivr.net/npm/jquery@3.3.1/dist/jquery.min.js"></script>
    <script src="//cdn.jsdelivr.net/npm/fomantic-ui@2.8.7/dist/semantic.min.js"></script>
    <script src="//cdn.jsdelivr.net/npm/handlebars@v4.7.6/dist/handlebars.js"></script>
    <script type="text/javascript">
      function contentState(threadStarter) {
        if (threadStarter.body.parsed !== undefined) {
          return threadStarter.body.parsed;
        } else if (null !== threadStarter.body.serializedContentState) {
          return threadStarter.body.parsed = JSON.parse(threadStarter.body.serializedContentState);
        } else if (null !== threadStarter.sharedMessage) {
          return threadStarter.body.parsed = JSON.parse(threadStarter.sharedMessage.body.serializedContentState);
        } else {
          return threadStarter.body.parsed = {blocks: []};
        }
      }

      Handlebars.registerHelper('type', function(message) {
        if (message.threadStarter.isQuestion) {
          return 'question';
        } else if (message.isAnnouncement) {
          return 'announcement';
        } else {
          return 'update';
        }
      });

      Handlebars.registerHelper('date', function(value) {
        return value.replace('T', ' ').replace(/\.[0-9]+Z$/, '');
      });

      Handlebars.registerHelper('avatar', function(user) {
        return user.avatarUrlTemplate.replaceAll(/\{(width|height)\}/g, 48);
      });

      Handlebars.registerHelper('image', function(template, context) {
        return template.replaceAll(/\{([^}]+)\}/g, (match, placeholder) => context.hash[placeholder]);
      });

      Handlebars.registerHelper('likes', function(reactions) {
        if (reactions.totalCount > 0) {
          return '<i class="heart outline like icon"></i> ' + reactions.totalCount;
        }
        return '';
      });

      Handlebars.registerHelper('first', function(threadStarter) {
        const content = contentState(threadStarter).blocks[0].text;

        if (content.length > 100) {
          return content.substring(0, 100) + 'â€¦';
        } else {
          return content;
        }
      });

      Handlebars.registerHelper('body', function(threadStarter) {
        const body = contentState(threadStarter);

        let content = '';
        for (const block of body.blocks) {
          content += block.text;
        }
        return content;
      });
    </script>
    {{> script}} 
  </body>
</html>